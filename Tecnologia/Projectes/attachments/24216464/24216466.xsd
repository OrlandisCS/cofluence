<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns="http://uri.etsi.org/2038/v1.1.1#" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:XAdES="http://uri.etsi.org/01903/v1.2.2#" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" targetNamespace="http://uri.etsi.org/2038/v1.1.1#" elementFormDefault="qualified" attributeFormDefault="unqualified">
	<xsd:import namespace="http://uri.etsi.org/01903/v1.2.2#" schemaLocation="XAdESv1.2.2.xsd"/>
	<xsd:import namespace="http://www.w3.org/2000/09/xmldsig#" schemaLocation="http://www.w3.org/TR/2002/REC-xmldsig-core-20020212/xmldsig-core-schema.xsd"/>
	<!--	SignaturePolicy - Root element for the XML signature policy specification.	-->
	<xsd:element name="SignaturePolicy" type="SignaturePolicyType"/>
	<!--	SignaturePolicyType	-->
	<xsd:complexType name="SignaturePolicyType">
		<xsd:sequence>
			<!--	The SignPolicyDigestAlg element indicates the digest algorithm used to compute a digest value for the unique binary encoded value of the definitive form of the signature policy.	-->
			<xsd:element name="SignPolicyDigestAlg" type="ds:DigestMethodType"/>
			<!--	The optional ds:Transforms element can be used to specify a chain of transformations that has to be applied to the data before being digested.	-->
			<xsd:element ref="ds:Transforms" minOccurs="0"/>
			<!--	The SignPolicyInfo element contains the computer processable information of the signature policy (General information to be recorded about the signature policy).	-->
			<xsd:element name="SignPolicyInfo" type="SignaturePolicyInfoType"/>
			<!--	The SignPolicyDigest element contains the aforementioned digest value. The signer shall include it so that it can be verified that the policy selected by the signer is identical to the one being used the verifier.	-->
			<xsd:element name="SignPolicyDigest" type="ds:DigestValueType"/>
		</xsd:sequence>
	</xsd:complexType>
	<!--	SignPolicyInfo	-->
	<xsd:element name="SignaturePolicyInfo" type="SignaturePolicyInfoType"/>
	<!--	SignaturePolicyInfoType	-->
	<xsd:complexType name="SignaturePolicyInfoType">
		<xsd:sequence>
			<!--	Signature Policy Identifier: the "Signature Policy" will be identifiable by an identifier (SignPolicyIdentifier element).	-->
			<xsd:element name="SignPolicyIdentifier" type="XAdES:ObjectIdentifierType"/>
			<!--	Date of issue: when the "Signature Policy" was issued (DateOfIssue element).	-->
			<xsd:element name="DateOfIssue" type="xsd:dateTime"/>
			<!--	Signature Policy Issuer name: an identifier for the body responsible for issuing the Signature Policy. This may be used by the signer or verifier in deciding if a policy is to be trusted, in which case the signer/verifier shall authenticate the origin of the signature policy as coming from the identified issuer (PolicyIssuerName element).	-->
			<xsd:element name="PolicyIssuerName" type="xsd:string"/>
			<!--	Field of application: this defines in general terms the general legal/contract/application contexts in which the signature policy is to be used and the specific purposes for which the electronic signature is to be applied (FieldOfApplication element).	-->
			<xsd:element name="FieldOfApplication" type="xsd:string"/>
			<!--	The signature validation policy defines a number of rules that have to be followed by both the signer when producing the electronic signature and by the verifier when verifying such an electronic signature. These rules refer to a number of different commitments being supported by electronic signatures produced under the security policy. They are fully processable to allow the validation of electronic signatures issued under that signature policy	-->
			<xsd:element name="SignatureValidationPolicy" type="SignatureValidationPolicyType"/>
			<xsd:element name="SignPolExtensions" type="SignPolExtensionsListType" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<!--	SignaturePolicyExtensionsListType - Open optional set of extensions.	-->
	<xsd:complexType name="SignPolExtensionsListType">
		<xsd:sequence maxOccurs="unbounded">
			<xsd:element name="SignPolExtension" type="XAdES:AnyType"/>
		</xsd:sequence>
	</xsd:complexType>
	<!--	SignatureValidationPolicy	-->
	<xsd:element name="SignatureValidationPolicy" type="SignatureValidationPolicyType"/>
	<!--	SignatureValidationPolicyType	-->
	<xsd:complexType name="SignatureValidationPolicyType">
		<xsd:sequence>
			<!--	A signing period, which identifies the date and time before which the signature policy should not be used for creating signatures, and an optional date after which it should not be used for creating signatures (SigningPeriod element).	-->
			<xsd:element name="SigningPeriod" type="TimePeriodType"/>
			<!--	A list of rules to be applied to all the different commitment types (CommonRules element). If a field is present in CommonRules then the equivalent field shall not be present in any of the CommitmentRules. If any of the following fields are not present in CommonRules then it shall be present in each CommitmentRule: SignerAndVeriferRules, SigningCertTrustCondition, TimeStampTrustCondition.	-->
			<xsd:element name="CommonRules" type="CommonRulesType"/>
			<!--	A list of specific rules that only apply to certain given commitment types (CommitmentRules element). Essentially it is a sequence where each element has the same contents as the CommonRules plus the SelCommitmentTypes element. As for the common rules, these rules are defined in terms of rules for signer and verifier and trust conditions for certificates, timestamps and roles, along with any constraints on algorithms.	-->
			<xsd:element name="CommitmentRules" type="CommitmentRulesListType"/>
			<!--	Optionally a number of qualifying extensions whose type is left open.	-->
			<xsd:element name="SignPolicyExtensions" type="SignPolExtensionsListType" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<!--	TimePeriodType	-->
	<xsd:complexType name="TimePeriodType">
		<xsd:sequence>
			<xsd:element name="NotBefore" type="xsd:dateTime"/>
			<xsd:element name="NotAfter" type="xsd:dateTime" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<!--	CommonRules	-->
	<xsd:element name="CommonRules" type="CommonRulesType"/>
	<!--	CommonRulesType	-->
	<xsd:complexType name="CommonRulesType">
		<xsd:sequence>
			<!--	Rules for signer and verifier (SignerAndVerifier element). By specifying these requirements on the signer and verifier, the responsibilities of the two parties can be clearly defined to establish all the necessary information.	-->
			<xsd:element name="SignerAndVerifierRules" type="SignerAndVerifierRulesType" minOccurs="0"/>
			<!--	Trust conditions for certificates (SigningCertTrustCondition element). Defines Trust conditions for certificate path processing used to validate the signing certificate (SignerTrustTrees element), and minimum requirements for revocation information (CertificateRevReq element).	-->
			<xsd:element name="SigningCertTrustCondition" type="SigningCertTrustConditionType" minOccurs="0"/>
			<!--	Trust conditions for timestamps (TimeStampTrustCondition element).	-->
			<xsd:element name="TimeStampTrustCondition" type="TimeStampTrustConditionType" minOccurs="0"/>
			<!--	Trust conditions for roles (RoleTrustCondition element section).	-->
			<xsd:element name="RoleTrustCondition" type="RoleTrustConditionType" minOccurs="0"/>
			<!--	Constraints on algorithms (AlgorithmConstratintSet element).	-->
			<xsd:element name="AlgorithmConstraintSet" type="AlgorithmConstraintSetType" minOccurs="0"/>
			<xsd:element name="SignPolExtensions" type="SignPolExtensionsListType" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<!--	SignerAndVerifierRulesType	-->
	<xsd:complexType name="SignerAndVerifierRulesType">
		<xsd:sequence>
			<!--	Requirements on the signer to provide given signed qualifying properties and roles.	-->
			<xsd:element name="SignerRules" type="SignerRulesType"/>
			<!--	The verifier rules identify the unsigned qualifying properties that shall be present under this policy and shall be added to the electronic signature by the verifier if not added by the signer (additional certificates, CRLs, results of on line certificate status checks and to use timestamps).	-->
			<xsd:element name="VerifierRules" type="VerifierRulesType"/>
		</xsd:sequence>
	</xsd:complexType>
	<!--	CommitmentRules	-->
	<xsd:element name="CommitmentRules" type="CommitmentRulesListType"/>
	<!--	CommitmentRulesListType	-->
	<xsd:complexType name="CommitmentRulesListType">
		<xsd:sequence maxOccurs="unbounded">
			<xsd:element name="CommitmentRule" type="CommitmentRuleType"/>
		</xsd:sequence>
	</xsd:complexType>
	<!--	CommitmentRuleType	-->
	<xsd:complexType name="CommitmentRuleType">
		<xsd:sequence>
			<!--	The SelCommitmentTypes element is used to indicate the commitment taken by a certain agent under the signature policy being specified.	-->
			<xsd:element name="SelCommitmentTypes" type="SelectedCommitmentTypeList"/>
			<xsd:element name="SignerAndVerifierRules" type="SignerAndVerifierRulesType" minOccurs="0"/>
			<xsd:element name="SigningCertTrustCondition" type="SigningCertTrustConditionType" minOccurs="0"/>
			<xsd:element name="TimeStampTrustCondition" type="TimeStampTrustConditionType" minOccurs="0"/>
			<xsd:element name="RoleTrustCondition" type="RoleTrustConditionType" minOccurs="0"/>
			<xsd:element name="AlgorithmConstraintSet" type="AlgorithmConstraintSetType" minOccurs="0"/>
			<xsd:element name="SignPolExtensions" type="SignPolExtensionsListType" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<!--	SelCommitmentTypes	-->
	<xsd:element name="SelCommitmentTypes" type="SelectedCommitmentTypeList"/>
	<!--	SelectedCommitmentTypeList	-->
	<xsd:complexType name="SelectedCommitmentTypeList">
		<xsd:sequence maxOccurs="unbounded">
			<!--	It contains a list of selected commitments whose semantic is given in the RecognizedCommitmentType elements.	-->
			<xsd:element name="SelCommitmentType" type="SelectedCommitmentType"/>
		</xsd:sequence>
	</xsd:complexType>
	<!--	SelectedCommitmentType	-->
	<xsd:complexType name="SelectedCommitmentType">
		<xsd:choice>
			<!--	If a certain SelCommitmentType contains an Empty element, it indicates that this rule is applied when a commitment type is not present in the electronic signature (i.e. the type of commitment is indicated in the semantics of the message). Otherwise, the electronic signature shall contain a commitment type indication that shall fit one of the commitments types that are mentioned in the RecognizedCommitmentType elements.	-->
			<xsd:element name="Empty"/>
			<!--	The RecognizedCommitmentType element contains the semantic of each of the commitments taken by certain agents under the specified signature policy.	-->
			<xsd:element name="RecognizedCommitmentType" type="CommitmentType"/>
		</xsd:choice>
	</xsd:complexType>
	<!--	RecognizedCommitmentType	-->
	<xsd:element name="RecognizedCommitmentType" type="CommitmentType"/>
	<!--	CommitmentType	-->
	<xsd:complexType name="CommitmentType">
		<xsd:sequence>
			<!--	The CommitmentIdentifier element identifies the commitment being present in the signature policy.	-->
			<xsd:element name="CommitmentIdentifier" type="XAdES:ObjectIdentifierType"/>
			<!--	FieldOfApplication element defines the specific use of the commitment within the overall field of application defined for the policy.	-->
			<xsd:element name="FieldOfApplication" type="xsd:string" minOccurs="0"/>
			<!--	And Semantics element, the specific meaning.	-->
			<xsd:element name="Semantics" type="xsd:string" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<!--	SignerRules	-->
	<xsd:element name="SignerRules" type="SignerRulesType"/>
	<!--	SignerRulesType	-->
	<xsd:complexType name="SignerRulesType">
		<xsd:sequence>
			<!--	Element ExternalSignedObjects: if the signed objects are external to the Signature element.	-->
			<xsd:element name="ExternalSignedObjects" type="xsd:boolean" minOccurs="0"/>
			<!--	Element MandatedSignedQProperties: the signed qualifying properties (as specified in TS 101 903 [5]) that shall be provided by the signer under this policy. It shall include the identifier for all those signed qualifying properties required by the present document as well as additional qualifying properties required by the signature policy.	-->
			<xsd:element name="MandatedSignedQProperties" type="QPropertiesListType"/>
			<!--	Element MandatedUnsignedQProperties: the unsigned qualifying properties (as specified in TS 101 903 [5]) that shall be provided by the signer under this policy. It shall include the identifier for all those unsigned qualifying properties required by the present document as well as additional qualifying properties required the signature policy. For example, if a SignatureTimestamp element (whose XML schema definition appears in TS 101 903 [5]) is required by the signer the corresponding URI for this element shall be included.	-->
			<xsd:element name="MandatedUnsignedQProperties" type="QPropertiesListType"/>
			<!--	Element MandatedCertificateRef: whether the certificate identifiers from the full certification path up to the trust point shall be provided by the signer in the SigningCertificate qualifying property defined in TS 101 903 [5]. It identifies whether just a reference to the signer's certificate, or references to the full certificate path shall be provided by the signer.	-->
			<xsd:element name="MandatedCertificateRef" type="CertificateReqType"/>
			<!--	Element MandatedCertificateInfo: whether a signer's certificate, or all certificates in the certification path to the trust point shall be provided by the signer in the KeyInfo element of Signature. It identifies whether a signer's certificate, or all certificates in the certification path to the trust point shall be provided by the signer in the KeyInfo field of Signature.	-->
			<xsd:element name="MandatedCertificateInfo" type="CertificateReqType"/>
			<xsd:element name="SignPolicyExtensions" type="SignPolExtensionsListType" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<!--	QPropertiesListType	-->
	<xsd:complexType name="QPropertiesListType">
		<xsd:sequence minOccurs="0" maxOccurs="unbounded">
			<xsd:element name="QPropertyID" type="xsd:anyURI"/>
		</xsd:sequence>
	</xsd:complexType>
	<!--	CertificateReqType	-->
	<xsd:simpleType name="CertificateReqType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="signerOnly"/>
			<xsd:enumeration value="fullPath"/>
		</xsd:restriction>
	</xsd:simpleType>
	<!--	VerifierRules	-->
	<xsd:element name="VerifierRules" type="VerifierRulesType"/>
	<!--	VerifierRulesType	-->
	<xsd:complexType name="VerifierRulesType">
		<xsd:sequence>
			<xsd:element name="MandatedQUnsignedProperties" type="QPropertiesListType"/>
			<xsd:element name="SignPolicyExtensions" type="SignPolExtensionsListType" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<!--	SigningCertTrustCondition	-->
	<xsd:element name="SigningCertTrustCondition" type="SigningCertTrustConditionType"/>
	<!--	SigningCertTrustConditionType
Rules for use of Certification Authorities
The certificate validation process of the verifier, and hence the certificates that may be used by the signer for a valid electronic signature, may be constrained by the combination of the trust point and certificate path constraints in the signature validation policy.

Trust Points
The signature validation policy defines the certification authority trust points that are to be used for signature verification. Several trust points may be specified under one signature policy. Specific trust points may be specified for a particular type of commitment defined under the signature policy. For a signature to be valid a certification path shall exists between the Certification Authority that has granted the certificate selected by the signer (i.e. the used usercertificate) and one of the trust point of the Signature Validation Policy.

Certification Path
There may be constraints on the use of certificates issued by one or more CA(s) in the certificate chain and trust points. The two prime constraints are certificate policy constraints and naming constraints. Certificate policy constraints limit the certification chain between the user certificate and the certificate of the trusted point to a given set of certificate policies, or equivalents identified through certificate policy mapping. The naming constraints limit the forms of names that the CA is allowed to certify. Name constraints are particularly important when a Signature policy identifies more than one trust point. In this case, a certificate of a particular trusted point may only be used to verify signatures from users with names permitted under the name constraint.
Certificate Authorities may be organized in a tree structure, this tree structure may represent the trust relationship between various CA(s) and the users CA. Alternatively, a mesh relationship may exist where a combination of tree and peer cross-certificates may be used. The requirement of the certificate path in the present document is that it provides the trust relationship between all the CAs and the signers user certificate. The starting point from a verification point of view, is the trust point. A trust point, usually a CA that publishes self-certified certificates, is the starting point from which the verifier verifies the certificate chain. Naming constraints may apply from the trust point, in which case theyapply throughout the set of certificates that make up the certificate path down to the signer's user certificate.
Policy constraints can be easier to process but to be effective require the presence of a certificate policy identifier in the certificates used in a certification path.
Certificate path processing, thus generally starts with one of the trust point from the signature policy and ends with the user certificate.
The certificate path processing procedures defined in RFC 2560 [11] clause 6 identifies the following initial parameters that are selected by the verifier in certificate path processing: acceptable certificate policies; naming constraints in terms of constrained and excluded naming subtree; requirements for explicit certificate policy indication and whether certificate policy mapping are allowed; restrictions on the certificate path length.
The signature validation policy identifies constraints on these parameters in the Certificate.	-->
	<xsd:complexType name="SigningCertTrustConditionType">
		<xsd:sequence>
			<!--	The SignerTrustTrees element identifies a set of self signed certificates for the trust points (CertificateTrustPoint elements) used to start (or end) certificate path processing and the initial conditions for certificate path validation as defined RFC 2459 [3] clause 6. As it has been said, this element is used to define policy for validating the signing certificate, the TSA's certificate and attribute certificates.	-->
			<xsd:element name="SignerTrustTrees" type="CertificateTrustTreesType"/>
			<xsd:element name="SignerRevReq" type="CertificateRevReqType"/>
		</xsd:sequence>
	</xsd:complexType>
	<!--	SignerTrustTrees	-->
	<xsd:element name="SignerTrustTrees" type="CertificateTrustTreesType"/>
	<!--	CertificateTrustTreesType	-->
	<xsd:complexType name="CertificateTrustTreesType">
		<xsd:sequence maxOccurs="unbounded">
			<xsd:element name="CertificateTrustPoint" type="CertificateTrustPointType"/>
		</xsd:sequence>
	</xsd:complexType>
	<!--	CertificateTrustPointType	-->
	<xsd:complexType name="CertificateTrustPointType">
		<xsd:sequence>
			<!--	The TrustPoint element gives the self signed certificate for the CA that is used as the trust point for the start of certificate path processing.	-->
			<xsd:element name="TrustPoint" type="ds:X509DataType"/>
			<!--	The PathLenConstraint element gives the maximum number of CA certificates that may be in a certification path following the trustpoint. A value of zero indicates that only the given trustpoint certificate and an end-entity certificate may be used. If present, the pathLenConstraint field shall be greater than or equal to zero. Where pathLenConstraint is not present, there is no limit to the allowed length of the certification path.	-->
			<xsd:element name="PathLenConstraint" type="xsd:integer" minOccurs="0"/>
			<!--	The AcceptablePolicySet element identifies the initial set of certificate policies, any of which are acceptable under the signature policy.	-->
			<xsd:element name="AcceptablePolicySet" type="AcceptablePoliciesListType" minOccurs="0"/>
			<!--	The NameConstraints field indicates a name space within which all subject names in subsequent certificates in a certification path shall be located. Restrictions may apply to the subject distinguished name or subject alternative names. Restrictions apply only when the specified name form is present. If no name of the type is in the certificate, the certificate is acceptable. These restrictions are defined in terms of permitted (PermittedSubtrees element) or excluded name subtrees (ExcludedSubtrees element). Any name matching a restriction in the ExcludedSubtrees element is invalid regardless of information appearing in the PermittedSubtrees element.	-->
			<xsd:element name="NameConstraints" type="NameConstraintsType" minOccurs="0"/>
			<!--	The PolicyConstraints element constrains path processing in two ways. It can be used to prohibit policy mapping or require that each certificate in a path contain an acceptable policy identifier. If present, this element specifies requirement for explicit indication of the certificate policy and/or the constraints on policy mapping.	-->
			<xsd:element name="PolicyConstraints" type="PolicyConstraintsType" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<!--	AcceptablePoliciesListType	-->
	<xsd:complexType name="AcceptablePoliciesListType">
		<xsd:sequence maxOccurs="unbounded">
			<xsd:element name="AcceptablePolicy" type="XAdES:ObjectIdentifierType"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- NameConstraintsType -->
	<xsd:complexType name="NameConstraintsType">
		<xsd:sequence>
			<xsd:element name="PermittedSubtrees" type="GeneralSubTreesListType" minOccurs="0"/>
			<xsd:element name="ExcludedSubtrees" type="GeneralSubTreesListType" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- GeneralSubTreesListType -->
	<xsd:complexType name="GeneralSubTreesListType">
		<xsd:sequence maxOccurs="unbounded">
			<xsd:element name="GeneralSubTree" type="GeneralSubTreeType"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- GeneralSubTreeType -->
	<xsd:complexType name="GeneralSubTreeType">
		<xsd:sequence>
			<xsd:element name="Base" type="xsd:string"/>
			<xsd:element name="Minimum" type="xsd:integer" default="0"/>
			<xsd:element name="Maximum" type="xsd:integer" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<!-- PolicyConstraintsType -->
	<xsd:complexType name="PolicyConstraintsType">
		<xsd:sequence>
			<!--	If the RequireExplicitPolicy element is present, subsequent certificates shall include an acceptable policy identifier. The value of RequireExplicitPolicy indicates the number of additional certificates that may appear in the path (including the trustpoint's self certificate) before an explicit policy is required. An acceptable policy identifier is the identifier of a policy required by the user of the certification path or the identifier of a policy that has been declared equivalent through policy mapping.	-->
			<xsd:element name="RequireExplicitPolicy" type="xsd:integer" minOccurs="0"/>
			<!--	If the InhibitPolicyMapping element is present within the PolicyConstraints element, the value indicates the number of additional certificates that may appear in the path (including the trustpoint's self certificate) before policy mapping is no longer permitted. For example, a value of one indicates that policy mapping may be processed in certificates issued by the subject of this certificate, but not in additional certificates in the path.	-->
			<xsd:element name="InhibitExplicitPolicy" type="xsd:integer" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<!--	SignerRevReq	-->
	<xsd:element name="SignerRevReq" type="CertificateRevReqType"/>
	<!--	CertificateRevReqType
The signature policy should define rules specifying requirements for the use of Certificate Revocation Lists (CRLs) and/or on-line certificate status check service to check the validity of a certificate. These rules specify the mandated minimum checks that shall be carried out.
It is expected that in many cases either check may be selected with checks of CRLs being carried out for certificate status that are unavailable from OCSP servers. The verifier may take into account information in the certificate in deciding how best to check the revocation status (e.g. a certificate extension field about authority information access or a CRL distribution point) provided that it does not conflict with the signature policy revocation rules.	-->
	<xsd:complexType name="CertificateRevReqType">
		<xsd:sequence>
			<!--	End certificates (i.e. the signers certificate, the attribute certificate or the timestamping authority certificate). These requirements appear in the EndRevReq element.	-->
			<xsd:element name="EndRevReq" type="RevocationReqType"/>
			<!--	CA certificates. These requirements appear in the CACerts element.	-->
			<xsd:element name="CACerts" type="RevocationReqType"/>
		</xsd:sequence>
	</xsd:complexType>
	<!--	RevocationReqType	-->
	<xsd:complexType name="RevocationReqType">
		<xsd:sequence>
			<xsd:element name="EnuRevReq" type="EnuRevReqType"/>
			<xsd:element name="exRevReq" type="SignPolExtensionsListType" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<!--	EnuRevReqType	-->
	<xsd:simpleType name="EnuRevReqType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="clrcheck"/>
			<xsd:enumeration value="ocspcheck"/>
			<xsd:enumeration value="bothcheck"/>
			<xsd:enumeration value="eithercheck"/>
			<xsd:enumeration value="nocheck"/>
			<xsd:enumeration value="other"/>
			<!--	clrCheck: Checks shall be made against current CRLs (or authority revocation lists).	-->
			<!--	ocspCheck: The revocation status shall be checked using the Online Certificate Status Protocol (RFC 2450 [10]).	-->
			<!--	bothCheck: Both OCSP and CRL checks shall be carried out.	-->
			<!--	eitherCheck: Either OCSP or CRL checks shall be carried out.	-->
			<!--	noCheck: No check is mandated.	-->
		</xsd:restriction>
	</xsd:simpleType>
	<!--	TimeStampTrustCondition	-->
	<xsd:element name="TimeStampTrustCondition" type="TimeStampTrustConditionType"/>
	<!--	TimeStampTrustConditionType
The TimeStampTrustCondition element identifies trust conditions for certificate path processing used to authenticate the timestamping authority and constraints on the certificate paths for timestamping authorities, constraints on the timestamping authority names and general timing constraints. This applies to the timestamp that shall be present in every XAdES-T electronic signature format as defined in TS 101 903 [5].	-->
	<xsd:complexType name="TimeStampTrustConditionType">
		<xsd:sequence>
			<!--	Signature keys from timestamping authorities will need to be supported by a certification path. The certification path used for timestamping authorities requires a trust point and possibly path constraints in the same way that the certificate path for the signer's key. If TtsCertificateTrustTrees element is not present then the same rule as defined in SigningCertTrustCondition element applies to certification of the timestamping authorities public key	-->
			<xsd:element name="TtsCertificateTrustTrees" type="CertificateTrustTreesType" minOccurs="0"/>
			<!--	The TsRevReq element specifies minimum requirements for revocation information, obtained through CRLs and/or OCSP responses, to be used in checking the revocation status of the time stamp that shall be present in the XAdES-T.	-->
			<xsd:element name="TtsRevReq" type="CertificateRevReqType" minOccurs="0"/>
			<!--	Restrictions may need to be placed by the validation policy on the named entities that may act a timestamping authorities. If TtsNameConstraints is not present then there are no additional naming constraints on the trusted timestamping authority other than those implied by the TtsCertificateTrustTrees element.	-->
			<xsd:element name="TtsNameConstraints" type="NameConstraintsType" minOccurs="0"/>
			<!--	Before an electronic signature may really be valid, the verifier has to be sure that the holder of the private key was really the only one in possession of key at the time of signing. However, there is an inevitable delay between a compromise or loss of key being noted, and a report of revocation being distributed. To allow greater confidence in the validity of a signature, a "cautionary period" may be identified before a signature may be said to be valid with high confidence. A verifier may revalidate a signature after this cautionary signature, or wait for this period before validating a signature. The validation policy may specify such a cautionary period. The CautionPeriod element specifies this period. The revocation status information forming the ES with Complete validation data shall not be collected and used to validate the electronic signature until after this caution period.	-->
			<xsd:element name="CautionPeriod" type="DeltaTimeType" minOccurs="0"/>
			<!--	There will be some delay between the time that a signature is created and the time the signer's digital signature is timestamped. However, the longer this elapsed period the greater the risk of the signature being invalidated due to compromise or deliberate revocation of its private signing key by the signer. Thus the signature policy should specify a maximum acceptable delay between the signing time as claimed by the signer and the time included within the timestamp. The SignatureTimestampDelay element specifies a maximum acceptable time between the signing time and the time at which the signature timestamp, as used to form the ES Timestamped, is created for the verifier. If the signature timestamp is later that the time in the signing-time attribute by more than the value given in SignatureTimestampDelay, the signature shall be considered invalid.	-->
			<xsd:element name="SignatureTimeStampDelay" type="DeltaTimeType" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<!--	DeltaTimeType	-->
	<xsd:complexType name="DeltaTimeType">
		<xsd:sequence>
			<xsd:element name="DeltaSeconds" type="xsd:integer"/>
			<xsd:element name="DeltaMinutes" type="xsd:integer"/>
			<xsd:element name="DeltaHours" type="xsd:integer"/>
			<xsd:element name="DeltaDays" type="xsd:integer"/>
		</xsd:sequence>
	</xsd:complexType>
	<!--	RoleTrustCondition	-->
	<xsd:element name="RoleTrustCondition" type="RoleTrustConditionType"/>
	<!--	RoleTrustConditionType
Roles can be supported as claimed roles or as certified roles using Attribute Certificates. The following rules should be in the management of roles:

Role Values.
When signature under a role is mandated by the signature policy, then either Attribute Certificates may be used or the signer may provide a claimed role. The acceptable role types or values may be dependent on the type of commitment. For example, a user may have several roles that allow the user to sign data that imply commitments based on one or more of his roles.

Trust Points for Certified Attributes.
When a signature under a certified role is mandated by the signature policy, Attribute Authorities -AA(s)- (Authorities that issue Attribute Certificates) are used and need to be validated as part of the overall validation of the electronic signature. The trust points for Attribute Authorities do not need to be the same as the trust points to evaluate a certificate from the CA of the signer. Thus the trust point for verifying roles need not be the same as trust point used to validate the certificate path of the user's key. Naming and certification policy constraints may apply to the AA in similar circumstance to when they apply to CA. Constraints on the AA and CA need not be exactly the same. AA(s) may be used when a signer is creating a signature on behalf of an organization, they can be particularly useful when the signature represents an organizational role. AA(s) may or may not be the same authority as CA(s). Thus, the Signature Policy identifies trust points that can be used for Attribute Authorities, either by reference to the same trust points as used for
Certification Authorities, or by an independent list.

Certification Path for Certified Attributes.
Attribute Authorities may be organized in a tree structure in similar way to CAs, where the AAs are the leaves of such a tree. Naming and other constraints may be required on attribute certificate paths in a similar manner to other electronic signature certificate paths. Thus, the Signature Policy identifies constraints on the following parameters used as input to the certificate path processing:
acceptable certificate policies, including requirements for explicit certificate policy indication and whether certificate policy mapping is allowed; naming constraints in terms of constrained and excluded naming subtrees; restrictions on the certificate path length.

If the RoleTrustCondition element is not present then any certified roles within an attribute certificate may not considered to be valid under the validation policy.	-->
	<xsd:complexType name="RoleTrustConditionType">
		<xsd:sequence>
			<!--	If RoleMandated is true then a role, certified within the following constraints, shall be present. If false, then the signature is still valid if no role is specified.	-->
			<xsd:element name="RoleMandated" type="xsd:boolean"/>
			<!--	The HowCertRole element specifies how must appear the roles within an electronic signature: uncertified roles"claimed" by the signer, or certified roles in an attribute certificate or either.	-->
			<xsd:element name="HowCertRole" type="HowCertRoleType"/>
			<!--	The AttrCertTrustTrees element specifies certificate path conditions for any attribute certificate. If not present the same rules apply as in SigningCertTrustCondition.	-->
			<xsd:element name="AttrCertTrustTrees" type="CertificateTrustTreesType" minOccurs="0"/>
			<!--	The RoleRevReq element specifies minimum requirements for revocation information, obtained through CRLs and/or OCSP responses, to be used in checking the revocation status of Attribute Certificates, if any are present.	-->
			<xsd:element name="RoleRevReq" type="CertificateRevReqType" minOccurs="0"/>
			<!--	If the RoleConstraints field is not present then there are no constraints on the roles that may be validated under this policy.	-->
			<xsd:element name="RoleConstraints" type="RoleConstraintsType" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<!--	HowCertRoleType	-->
	<xsd:simpleType name="HowCertRoleType">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="ClaimedRole"/>
			<xsd:enumeration value="CertifiedRole"/>
			<xsd:enumeration value="Either"/>
		</xsd:restriction>
	</xsd:simpleType>
	<!--	RoleConstraintsType	-->
	<xsd:complexType name="RoleConstraintsType">
		<xsd:sequence>
			<!--	If a RoleTypeConstraint element is present within the RoleConstraints element, it specifies a role type that is considered valid under the signature policy. Any value for that role is considered valid.	-->
			<xsd:element name="RoleTypeConstraint" type="XAdES:ObjectIdentifierType" minOccurs="0" maxOccurs="unbounded"/>
			<!--	If a RoleValueConstraint is present within the RoleConstraints element, it specifies a specific role value that is considered valid under the signature policy.	-->
			<xsd:element name="RoleValueConstraint" type="XAdES:AnyType" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<!--	AlgorithmConstraintSet	-->
	<xsd:element name="AlgorithmConstraintSet" type="AlgorithmConstraintSetType"/>
	<!--	AlgorithmConstraintSetType
The AlgorithmConstrainSet element, if present, identifies the signing algorithms (hash, public key cryptography, combined hash and public key cryptography) that may be used for specific purposes and any minimum length. If this element is not present then the policy applies no constraints.	-->
	<xsd:complexType name="AlgorithmConstraintSetType">
		<xsd:sequence>
			<!--	By the signer in creating the signature (SignerAlgConstraints element).	-->
			<xsd:element name="SignerAlgConstraints" type="AlgConstraintsListType" minOccurs="0"/>
			<!--	In end entity public key Certificates (EeCertAlgConstraints element).	-->
			<xsd:element name="EeCertAlgConstraints" type="AlgConstraintsListType" minOccurs="0"/>
			<!--	In CA Certificates (CACertAlgConstraints element).	-->
			<xsd:element name="CACertAlgConstraints" type="AlgConstraintsListType" minOccurs="0"/>
			<!--	In attribute Certificates (AaCertAlgConstraints element).	-->
			<xsd:element name="AaCertAlgConstraints" type="AlgConstraintsListType" minOccurs="0"/>
			<!--	By the timestamping authority (TSACertAlgConstraints element).	-->
			<xsd:element name="TSACertAlgConstraints" type="AlgConstraintsListType" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
	<!--	AlgConstraintsListType	-->
	<xsd:complexType name="AlgConstraintsListType">
		<xsd:sequence maxOccurs="unbounded">
			<xsd:element name="AlgAndLength" type="AlgAndLengthType"/>
		</xsd:sequence>
	</xsd:complexType>
	<!--	AlgAndLengthType	-->
	<xsd:complexType name="AlgAndLengthType">
		<xsd:sequence>
			<xsd:element name="AlgId" type="xsd:anyURI"/>
			<!--	The MinKeyLength element specifies the minimum length of the corresponding keys in bits.	-->
			<xsd:element name="MinKeyLength" type="xsd:integer" minOccurs="0"/>
			<xsd:element name="Other" type="SignPolExtensionsListType" minOccurs="0"/>
		</xsd:sequence>
	</xsd:complexType>
</xsd:schema>
